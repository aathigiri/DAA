1. Given an m x n grid and a ball at a starting cell, find the number of ways to move the ball
out of the grid boundary in exactly N steps.
Example:
· Input: m=2,n=2,N=2,i=0,j=0 · Output: 6
· Input: m=1,n=3,N=3,i=0,j=1 · Output: 12
Solition:
  m, n, N, i, j = 2, 2, 2, 0, 0
dp = [[[0] * (N + 1) for _ in range(n)] for _ in range(m)]
dp[i][j][0] = 1

for step in range(1, N + 1):
    for x in range(m):
        for y in range(n):
            dp[x][y][step] += dp[x - 1][y][step - 1] if x > 0 else 1
            dp[x][y][step] += dp[x + 1][y][step - 1] if x < m - 1 else 1
            dp[x][y][step] += dp[x][y - 1][step - 1] if y > 0 else 1
            dp[x][y][step] += dp[x][y + 1][step - 1] if y < n - 1 else 1

result = sum(dp[x][y][N] for x in range(m) for y in range(n))
print(result)

2. You are a professional robber planning to rob houses along a street. Each house has a
certain amount of money stashed. All houses at this place are arranged in a circle. That
means the first house is the neighbor of the last one. Meanwhile, adjacent houses have
security systems connected, and it will automatically contact the police if two adjacent
houses were broken into on the same night.
Examples:
(i) Input : nums = [2, 3, 2]

Output : The maximum money you can rob without alerting the
police is 3(robbing house 1).

(ii) Input : nums = [1, 2, 3, 1]

Output : The maximum money you can rob without alerting the
police is 4 (robbing house 1 and house 3).


nums = [2, 3, 2]  # Example input

if len(nums) == 1:
    max_money = nums[0]
else:
    def rob_linear(houses):
        prev, curr = 0, 0
        for money in houses:
            prev, curr = curr, max(curr, prev + money)
        return curr

    max_money = max(rob_linear(nums[:-1]), rob_linear(nums[1:]))

print(f"The maximum money you can rob without alerting the police is {max_money}.")

3. You are climbing a staircase. It takes n steps to reach the top. Each time you can either
climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Examples:
(i) Input: n=4 Output: 5
(ii) Input: n=3 Output: 3
n = 4  # Example input
if n == 0:
    print(1)
elif n == 1:
    print(1)
else:
    ways = [0] * (n + 1)
    ways[0], ways[1] = 1, 1
    for i in range(2, n + 1):
        ways[i] = ways[i - 1] + ways[i - 2]
    print(ways[n])  # Output: 5

4. A robot is located at the top-left corner of a m×n grid .The robot can only move either
down or right at any point in time. The robot is trying to reach the bottom-right corner of
the grid. How many possible unique paths are there?
Examples:
(i) Input: m=7,n=3 Output: 28
(ii) Input: m=3,n=2 Output: 3
Solution:
m, n = 7, 3  # Example input
dp = [[1] * n for _ in range(m)]

for i in range(1, m):
    for j in range(1, n):
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]

print(dp[m - 1][n - 1])  # Output: 28


5. In a string S of lowercase letters, these letters form consecutive groups of the same
character. For example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx",
"z", and "yy". A group is identified by an interval [start, end], where start and end denote
the start and end indices (inclusive) of the group. In the above example, "xxxx" has the
interval [3,6]. A group is considered large if it has 3 or more characters. Return the
intervals of every large group sorted in increasing order by start index.
Example 1:
Input: s = "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the only large group with start index 3 and end index 6.
Example 2:
Input: s = "abc"

Output: []
Explanation: We have groups "a", "b", and "c", none of which are large groups.
Solution:
s = "abbxxxxzzy"
result = []
i = 0

while i < len(s):
    start = i
    while i < len(s) - 1 and s[i] == s[i + 1]:
        i += 1
    end = i
    if end - start + 1 >= 3:
        result.append([start, end])
    i += 1

print(result)  # Output: [[3, 6]]

6.

Solution:
import numpy as np

# Example test cases
board = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]

# Get dimensions of the board
rows, cols = len(board), len(board[0])

# Create a copy of the board to store the next state
next_board = np.zeros((rows, cols), dtype=int)

# Define directions to check neighbors (8 possible directions)
directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

# Traverse each cell in the board
for r in range(rows):
    for c in range(cols):
        live_neighbors = 0
        
        # Check all 8 directions for live neighbors
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and board[nr][nc] == 1:
                live_neighbors += 1
        
        # Apply the Game of Life rules
        if board[r][c] == 1:
            if live_neighbors < 2 or live_neighbors > 3:
                next_board[r][c] = 0  # Cell dies
            else:
                next_board[r][c] = 1  # Cell survives
        else:
            if live_neighbors == 3:
                next_board[r][c] = 1  # Cell is born

# Output the next state of the board
print("Next state:")
for row in next_board:
    print(row.tolist())


